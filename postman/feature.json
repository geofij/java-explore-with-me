{
	"info": {
		"_postman_id": "aa6993c1-85e2-47b1-9fd3-7222381fa80d",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30165877"
	},
	"item": [
		{
			"name": "Создание комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let comment;",
							"",
							"    try {",
							"        ",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user2.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set('eid', event.id);",
							"",
							"        comment =await rnd.getComment();",
							"        ",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"    pm.request.body.update({",
							"        mode: 'raw',",
							"        raw: JSON.stringify(comment),",
							"        options: { raw: { language: 'json' } }",
							"    });",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
							"    pm.response.to.have.status(201);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = JSON.parse(pm.request.body.raw);",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Коментарий должно содержать поля: id, text, author, createdAt \", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('text');",
							"pm.expect(target).to.have.property('author');",
							"pm.expect(target).to.have.property('created');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(target.id).to.not.be.null;",
							"    pm.expect(target.text).equal(source.text, 'Название события должно соответствовать названию события в запросе');",
							"});",
							"",
							"pm.test(\"Ответ не должен быть пустым\", function() {",
							"    pm.expect(target).to.not.be.null;",
							"    pm.expect(target).to.not.be.undefined;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userid/comments?eventId={{eid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария для не опубликованного события",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let comment;",
							"",
							"    try {",
							"        ",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user2.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        pm.collectionVariables.set('eid', event.id);",
							"",
							"        comment =await rnd.getComment();",
							"        ",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"    pm.request.body.update({",
							"        mode: 'raw',",
							"        raw: JSON.stringify(comment),",
							"        options: { raw: { language: 'json' } }",
							"    });",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
							"    pm.response.to.have.status(404);",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userid/comments?eventId={{eid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария с пустой строкой",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let comment;",
							"",
							"    try {",
							"        ",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user2.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        ",
							"        pm.collectionVariables.set('eventId', event.id);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
							"    pm.response.to.have.status(400);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\":\"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userid/comments?eventId={{eid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eid}}"
						}
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение всех комментариев пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        ",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user2.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"",
							"        const comment =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        ",
							"        const comment1 =await api.addComment(user2.id, event.id, rnd.getComment());",
							"",
							"        const comment2 =await api.addComment(user2.id, event.id, rnd.getComment());",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Коментарий должно содержать поля: id, text, author, created \", function () {",
							"pm.expect(target[0]).to.have.property('id');",
							"pm.expect(target[0]).to.have.property('text');",
							"pm.expect(target[0]).to.have.property('author');",
							"pm.expect(target[0]).to.have.property('created');",
							"});",
							"",
							"pm.test(\"Должен быть найден только три комментария к данному событию\", function () {",
							"    pm.expect(target.length).to.eql(3);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userid/comments?from=0&size=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"comments"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						}
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение всех комментариев события - сначала старые",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        ",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set('eid', event.id);",
							"",
							"        const comment =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        ",
							"        const comment1 =await api.addComment(user2.id, event.id, rnd.getComment());",
							"",
							"        const comment2 =await api.addComment(user2.id, event.id, rnd.getComment());",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Коментарий должно содержать поля: id, text, author, created \", function () {",
							"pm.expect(target[0]).to.have.property('id');",
							"pm.expect(target[0]).to.have.property('text');",
							"pm.expect(target[0]).to.have.property('author');",
							"pm.expect(target[0]).to.have.property('created');",
							"});",
							"",
							"pm.test(\"Должен быть найден только три комментария к данному событию\", function () {",
							"    pm.expect(target.length).to.eql(3);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/events/:eventid/comments?from=0&size=1000&sort=OLD",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":eventid",
						"comments"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						},
						{
							"key": "sort",
							"value": "OLD"
						}
					],
					"variable": [
						{
							"key": "eventid",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение всех комментариев события - сначала новые",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        ",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set('eid', event.id);",
							"",
							"        const comment =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        ",
							"        const comment1 =await api.addComment(user2.id, event.id, rnd.getComment());",
							"",
							"        const comment2 =await api.addComment(user2.id, event.id, rnd.getComment());",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Коментарий должно содержать поля: id, text, author, created \", function () {",
							"pm.expect(target[0]).to.have.property('id');",
							"pm.expect(target[0]).to.have.property('text');",
							"pm.expect(target[0]).to.have.property('author');",
							"pm.expect(target[0]).to.have.property('created');",
							"});",
							"",
							"pm.test(\"Должен быть найден только три комментария к данному событию\", function () {",
							"    pm.expect(target.length).to.eql(3);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/events/:eventid/comments?from=0&size=1000&sort=NEW",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"events",
						":eventid",
						"comments"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						},
						{
							"key": "sort",
							"value": "NEW"
						}
					],
					"variable": [
						{
							"key": "eventid",
							"value": "{{eid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев админом",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        ",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"",
							"        const user3 = await api.addUser(rnd.getUser());",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set('userIds', user3.id);",
							"",
							"        const comment =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        ",
							"        const comment1 =await api.addComment(user2.id, event.id, rnd.getComment());",
							"",
							"        const comment2 =await api.addComment(user3.id, event.id, rnd.getComment());",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Коментарий должно содержать поля: id, text, author, created \", function () {",
							"pm.expect(target[0]).to.have.property('id');",
							"pm.expect(target[0]).to.have.property('text');",
							"pm.expect(target[0]).to.have.property('author');",
							"pm.expect(target[0]).to.have.property('created');",
							"});",
							"",
							"pm.test(\"Должен быть найден только три комментария к данному событию\", function () {",
							"    pm.expect(target.length).to.eql(1);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comments?rangeStart=2024-07-15 19:00:00&rangeEnd=2025-07-15 19:00:00&from=0&size=1000&userIds={{userIds}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments"
					],
					"query": [
						{
							"key": "rangeStart",
							"value": "2024-07-15 19:00:00"
						},
						{
							"key": "rangeEnd",
							"value": "2025-07-15 19:00:00"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						},
						{
							"key": "userIds",
							"value": "{{userIds}}"
						},
						{
							"key": "eventIds",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев админом: полный запрос",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        ",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"",
							"        const user3 = await api.addUser(rnd.getUser());",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody1 = rnd.getEvent(category.id);",
							"        let eventBody2 = rnd.getEvent(category.id);",
							"        ",
							"        eventBody1['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody1);",
							"        let event2 = await api.addEvent(user2.id, eventBody2);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        event2 = await api.publishEvent(event2.id);",
							"",
							"        const comment =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        const comment1 =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        const comment2 =await api.addComment(user3.id, event.id, rnd.getComment());",
							"        const comment3 =await api.addComment(user3.id, event2.id, rnd.getComment());",
							"        const comment4 =await api.addComment(user3.id, event2.id, rnd.getComment());",
							"",
							"        pm.collectionVariables.set('userIds', user3.id);",
							"        pm.collectionVariables.set('eventIds', event2.id);",
							"",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Коментарий должно содержать поля: id, text, author, created \", function () {",
							"pm.expect(target[0]).to.have.property('id');",
							"pm.expect(target[0]).to.have.property('text');",
							"pm.expect(target[0]).to.have.property('author');",
							"pm.expect(target[0]).to.have.property('created');",
							"});",
							"",
							"pm.test(\"Должен быть найден только три комментария к данному событию\", function () {",
							"    pm.expect(target.length).to.eql(2);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comments?rangeStart=2024-07-15 19:00:00&rangeEnd=2025-07-15 19:00:00&from=0&size=1000&userIds={{userIds}}&eventIds={{eventIds}}&sort=NEW",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments"
					],
					"query": [
						{
							"key": "rangeStart",
							"value": "2024-07-15 19:00:00"
						},
						{
							"key": "rangeEnd",
							"value": "2025-07-15 19:00:00"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						},
						{
							"key": "userIds",
							"value": "{{userIds}}"
						},
						{
							"key": "eventIds",
							"value": "{{eventIds}}"
						},
						{
							"key": "sort",
							"value": "NEW"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Поиск комментариев админом с неправильным временем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
							"    pm.response.to.have.status(400);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/comments?rangeStart=2024-07-20 19:00:00&rangeEnd=2024-07-15 19:00:00&from=0&size=1000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments"
					],
					"query": [
						{
							"key": "rangeStart",
							"value": "2024-07-20 19:00:00"
						},
						{
							"key": "rangeEnd",
							"value": "2024-07-15 19:00:00"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user2.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"",
							"        let comment =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        ",
							"        let comment1 =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        pm.collectionVariables.set('response', comment1);",
							"        pm.collectionVariables.set(\"commentid\", comment1.id)",
							"        pm.request.body.update({",
							"            mode: 'raw',",
							"            raw: comment1,",
							"            options: { raw: { language: 'json' } }",
							"        });",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            // выполняем наш скрипт",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const source = pm.collectionVariables.get('response');",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Коментарий должно содержать поля: id, text, author, created \", function () {",
							"pm.expect(target).to.have.property('id');",
							"pm.expect(target).to.have.property('text');",
							"pm.expect(target).to.have.property('author');",
							"pm.expect(target).to.have.property('created');",
							"pm.expect(target).to.have.property('updated');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(source.text).equal(target.text, 'Текст события должна соответствовать искомому событию');",
							"});",
							"",
							"pm.test(\"Updated не должно быть null\", function () {",
							"    pm.expect(target.updated).to.not.null;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userid/comments/:commentid",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"comments",
						":commentid"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						},
						{
							"key": "commentid",
							"value": "{{commentid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария не являющимся владельцем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user2.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set('eventId', event.id);",
							"",
							"        let comment =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        pm.collectionVariables.set('uid', user1.id);",
							"        ",
							"        let comment1 =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        pm.collectionVariables.set('response', comment1);",
							"        pm.collectionVariables.set(\"commentid\", comment1.id)",
							"        pm.request.body.update({",
							"            mode: 'raw',",
							"            raw: comment1,",
							"            options: { raw: { language: 'json' } }",
							"        });",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            // выполняем наш скрипт",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
							"    pm.response.to.have.status(404);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userid/comments/:commentid",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"comments",
						":commentid"
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						},
						{
							"key": "commentid",
							"value": "{{commentid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария на пустую строку",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    try {",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user2.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set('eventId', event.id);",
							"",
							"        let comment =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        ",
							"        let comment1 =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        pm.collectionVariables.set('response', comment1);",
							"        pm.collectionVariables.set(\"commentid\", comment1.id)",
							"        pm.request.body.update({",
							"            mode: 'raw',",
							"            raw: { \"text\": \"\" },",
							"            options: { raw: { language: 'json' } }",
							"        });",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            // выполняем наш скрипт",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
							"    pm.response.to.have.status(400);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userid/comments/:commentid",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"comments",
						":commentid"
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						},
						{
							"key": "commentid",
							"value": "{{commentid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаления комментария пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let comment;",
							"",
							"    try {",
							"        ",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user2.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set('eventId', event.id);",
							"",
							"        const comment =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        pm.collectionVariables.set('commentid', comment.id);",
							"        pm.collectionVariables.set(\"response\", comment);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"    pm.request.body.update({",
							"        mode: 'raw',",
							"        raw: JSON.stringify(comment),",
							"        options: { raw: { language: 'json' } }",
							"    });",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"const source = pm.collectionVariables.get('response');",
							"const comId = pm.collectionVariables.get('commentid');",
							"",
							"pm.test(\"Комментарий должен быть найден до выполнения запроса\", function(){",
							"    pm.expect(source.id).to.eql(comId);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userid/comments/:commentid",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"comments",
						":commentid"
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						},
						{
							"key": "commentid",
							"value": "{{commentid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаления комментария пользователем не являющимся владельцем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {",
							"    const api = new API(pm);",
							"    const rnd = new RandomUtils();",
							"",
							"    let comment;",
							"",
							"    try {",
							"        ",
							"        const user1 = await api.addUser(rnd.getUser());",
							"",
							"        const user2 = await api.addUser(rnd.getUser());",
							"        pm.collectionVariables.set('uid', user1.id);",
							"",
							"        const category = await api.addCategory(rnd.getCategory());",
							"",
							"        let eventBody = rnd.getEvent(category.id);",
							"        eventBody['requestModeration'] = true;",
							"        let event = await api.addEvent(user1.id, eventBody);",
							"        ",
							"        event = await api.publishEvent(event.id);",
							"        pm.collectionVariables.set('eventId', event.id);",
							"",
							"        const comment =await api.addComment(user2.id, event.id, rnd.getComment());",
							"        pm.collectionVariables.set('commentid', comment.id);",
							"        pm.collectionVariables.set(\"response\", comment);",
							"    } catch(err) {",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
							"    }",
							"",
							"    pm.request.body.update({",
							"        mode: 'raw',",
							"        raw: JSON.stringify(comment),",
							"        options: { raw: { language: 'json' } }",
							"    });",
							"};",
							"",
							"const interval = setInterval(() => {}, 1000);",
							"",
							"setTimeout(async () => ",
							"    {",
							"        try {",
							"            await main();",
							"        } catch (e) {",
							"            console.error(e);",
							"        } finally {",
							"            clearInterval(interval);",
							"        }",
							"    },  ",
							"    100 ",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
							"    pm.response.to.have.status(404);  ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/:userid/comments/:commentid",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userid",
						"comments",
						":commentid"
					],
					"variable": [
						{
							"key": "userid",
							"value": "{{uid}}"
						},
						{
							"key": "commentid",
							"value": "{{commentid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментариев админом с пустым телом",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментариев админом с null полем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(400);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"commentIds\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментариев админом",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let commentIds;\r",
							"\r",
							"    try {\r",
							"        \r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        pm.collectionVariables.set('uid', user2.id);\r",
							"\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = true;\r",
							"        let event = await api.addEvent(user1.id, eventBody);\r",
							"        \r",
							"        event = await api.publishEvent(event.id);\r",
							"        pm.collectionVariables.set('eventId', event.id);\r",
							"\r",
							"        const comment =await api.addComment(user2.id, event.id, rnd.getComment());\r",
							"        \r",
							"        const comment1 =await api.addComment(user2.id, event.id, rnd.getComment());\r",
							"\r",
							"        const comment2 =await api.addComment(user2.id, event.id, rnd.getComment());\r",
							"    \r",
							"        commentIds = {\r",
							"            commentIds: [comment.id, comment2.id]\r",
							"        }\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"    pm.request.body.update({\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify(commentIds),\r",
							"        options: { raw: { language: 'json' } }\r",
							"    });\r",
							"\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addComment(userId, eventId, comment, verbose=null){",
					"        return this.post(\"/users/\" + userId + \"/comments?eventId=\" + eventId, comment,\"Ошибка при добавлении нового comment\",verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('Отправлено пустое тело ответа'))",
					"                    }else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getComment(){",
					"        return{",
					"            text: pm.variables.replaceIn('{{$randomLoremParagraph}}')",
					"        }",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "comment",
			"value": ""
		},
		{
			"key": "commentid",
			"value": "1",
			"type": "number"
		},
		{
			"key": "eventId",
			"value": ""
		},
		{
			"key": "commentText",
			"value": "",
			"type": "string"
		},
		{
			"key": "userIds",
			"value": "",
			"type": "string"
		},
		{
			"key": "eventIds",
			"value": "",
			"type": "string"
		}
	]
}